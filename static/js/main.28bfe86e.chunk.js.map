{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Footer/Footer.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","id","src","image","onClick","checkIfClicked","Wrapper","children","Header","currentScore","topScore","Footer","class","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cards","bind","assertThisInitialized","clickedCard","filter","card","cardsCopy","slice","sort","b","Math","random","clicked","resetCardsCopy","map","setState","findIndex","_this2","components_Header_Header","components_Wrapper_Wrapper","components_Card_Card","key","components_Footer_Footer","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"y1BAgBeA,SAZF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAK,iBAAmBL,EAAMM,GAC9BC,IAAKP,EAAMQ,MACXC,QAAS,kBAAMT,EAAMU,eAAeV,EAAMM,WCFnCK,SAJC,SAAAX,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBJ,EAAMY,YCa7BC,SAdA,SAAAb,GAAK,OAElBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+DACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,uBAAgDJ,EAAMc,aAAtD,iBAAkFd,EAAMe,WAG1Fd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6CCHSY,SANA,SAAAhB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGc,MAAM,0BAAT,qCCyEWC,cAlEb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtB,KACD0B,MAAQ,CACXC,MAAOA,EACPZ,SAAU,EACVD,aAAc,GAEhBK,EAAKT,eAAiBS,EAAKT,eAAekB,KAApBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPLA,8EAWJb,GAEb,IAAIwB,EAAcR,KAAKI,MAAMC,MAAMI,OAAO,SAAAC,GAAI,OAAIA,EAAK1B,KAAOA,IAAI,GAC9D2B,EAAYX,KAAKI,MAAMC,MAAMO,QAAQC,KAAK,SAASjC,EAAGkC,GAAG,MAAO,GAAMC,KAAKC,WAE/E,GAAKR,EAAYS,QAaZ,CAEH,IAAIC,EAAiBP,EAAUQ,IAAI,SAACT,GAClC,MAAO,CACL1B,GAAI0B,EAAK1B,GACTE,MAAOwB,EAAKxB,MACZ+B,SAAS,KAGbjB,KAAKoB,SAAS,CACZf,MAAOa,EACP1B,aAAc,SAvBhBgB,EAAYS,SAAU,EACtBN,EAAUA,EAAUU,UAAU,SAACX,GAAD,OAAUA,EAAK1B,KAAOA,KAAOwB,EAG3DR,KAAKoB,SAAS,CACZf,MAAOM,EACPnB,aAAcQ,KAAKI,MAAMZ,aAAe,EACxCC,SAAWO,KAAKI,MAAMZ,aAAe,EAAIQ,KAAKI,MAAMX,SAAWO,KAAKI,MAAMZ,aAAe,EAAIQ,KAAKI,MAAMX,4CAsBrG,IAAA6B,EAAAtB,KACP,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC0C,EAAD,CAAQ/B,aAAcQ,KAAKI,MAAMZ,aAAcC,SAAUO,KAAKI,MAAMX,WACpEd,EAAAC,EAAAC,cAAC2C,EAAD,KACGxB,KAAKI,MAAMC,MAAMc,IAAI,SAAAT,GAAI,OACxB/B,EAAAC,EAAAC,cAAC4C,EAAD,CACErC,eAAgBkC,EAAKlC,eACrBJ,GAAI0B,EAAK1B,GACT0C,IAAKhB,EAAK1B,GACVE,MAAOwB,EAAKxB,WAIlBP,EAAAC,EAAAC,cAAC8C,EAAD,cA7DUC,mBCPlBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.28bfe86e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n// set properties for the image and the onClick event to see if the card has been clicked or not already\r\nconst Card = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img \r\n        alt={\"This is image \" + props.id} \r\n        src={props.image}\r\n        onClick={() => props.checkIfClicked(props.id)}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n// set properties for the wrapper around the images and return everything (props.children)\r\nconst Wrapper = props => (\r\n  <div className=\"container wrapper\">{props.children}</div>\r\n);\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\n// create a header with a Bootstrap navbar and jumbotron\r\nconst Header = props => (\r\n  \r\n  <div className=\"main-container\">\r\n    <nav className=\"navbar sticky-top navbar-light bg-light justify-content-end\">\r\n      <h5 className=\"text-muted\">Current game score: {props.currentScore} | Top score: {props.topScore}</h5>\r\n    </nav>\r\n    \r\n    <div className=\"jumbotron text-muted\">\r\n      <h1>Disney Memory Card Game</h1>\r\n      <p className=\"lead\">Click a card, but only click it once!</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\n// set the footer to a copyright string\r\nconst Footer = props => (\r\n  <div className=\"footer\">\r\n    <p class=\"text-muted text-center\">Disney Memory Card Game</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Card from \"./components/Card\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\n\r\n// import the cards from a json list with image links\r\nimport cards from \"./cards.json\";\r\n\r\n// create constructor from the cards and set the initial scores to 0\r\n// topScore is the most cards clicked without duplicating\r\n// currentScore is the most clicked this round, and resets to 0 when duplicating clicks\r\nclass App extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: cards,\r\n      topScore: 0,\r\n      currentScore: 0,\r\n    };\r\n    this.checkIfClicked = this.checkIfClicked.bind(this);\r\n  }\r\n  \r\n  // check if a card has been clicked\r\n  checkIfClicked(id) {\r\n    // create a copy of the cards and use a random method to sort the array\r\n    let clickedCard = this.state.cards.filter(card => card.id === id)[0];\r\n    let cardsCopy = this.state.cards.slice().sort(function(a, b){return 0.5 - Math.random()});\r\n    // if a card has not been clicked, set its clicked state to true\r\n    if (!clickedCard.clicked) {\r\n      clickedCard.clicked = true;\r\n      cardsCopy[cardsCopy.findIndex((card) => card.id === id)] = clickedCard;\r\n      \r\n      // set the state and increment the counter\r\n      this.setState({\r\n        cards: cardsCopy,\r\n        currentScore: this.state.currentScore + 1,\r\n        topScore: (this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore),\r\n      });\r\n    }\r\n    \r\n    // if a card has been clicked already, then set its click to false and reset the game\r\n    else {\r\n      \r\n      let resetCardsCopy = cardsCopy.map((card) => {\r\n        return {\r\n          id: card.id,\r\n          image: card.image,\r\n          clicked: false,\r\n        }\r\n      });\r\n      this.setState({\r\n        cards: resetCardsCopy,\r\n        currentScore: 0,\r\n      });\r\n    } \r\n  }\r\n  \r\n  // render the header, score, wrapper, and footer on the page using the current state values\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header currentScore={this.state.currentScore} topScore={this.state.topScore}/>\r\n        <Wrapper>  \r\n          {this.state.cards.map(card => (\r\n            <Card\r\n              checkIfClicked={this.checkIfClicked}\r\n              id={card.id}\r\n              key={card.id}\r\n              image={card.image}\r\n              />\r\n          ))}\r\n        </Wrapper>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}